@inherits FeedbackComponent<QuestionViewModel, bool>

<Form @ref="form" Model="this.Options"
      LabelColSpan="4"
      WrapperColSpan="16"
      OnFinish="async(ctx) => await OnFinish(ctx)"
      OnFinishFailed="OnFinishFailed">
    <ValidationSummary />
    <FormItem Label="Type">
        <Select @bind-Value="context.QuestionType" TItem="ViewModels.QuestionTypes" TItemValue="ViewModels.QuestionTypes" OnSelectedItemChanged="(item) => ResetValidation()">
            <SelectOptions>
                <SelectOption TItem="ViewModels.QuestionTypes" TItemValue="ViewModels.QuestionTypes" Value="ViewModels.QuestionTypes.SingleChoice" Label="Single Choice" />
                <SelectOption TItem="ViewModels.QuestionTypes" TItemValue="ViewModels.QuestionTypes" Value="ViewModels.QuestionTypes.MultipleChoice" Label="Multiple Choice" />
                <SelectOption TItem="ViewModels.QuestionTypes" TItemValue="ViewModels.QuestionTypes" Value="ViewModels.QuestionTypes.Statements" Label="Statements" />
                <SelectOption TItem="ViewModels.QuestionTypes" TItemValue="ViewModels.QuestionTypes" Value="ViewModels.QuestionTypes.DragDrop" Label="DragDrop" />
            </SelectOptions>
        </Select>
    </FormItem>
    <Card Title="Title">
        <Editor @bind-Value="context.Title" Mode="wysiwyg" MinHeight="300" Options="@EditorOptions" />
    </Card>
    @*<FormItem Label="Title">
            <Editor @bind-Value="context.Title" Mode="wysiwyg" MinHeight="300" Options="@EditorOptions" />
        </FormItem>*@
    <Card Title="Options List">
        <Button Type="dashed"
                Style="width: 100%; margin-bottom: 8px;"
                OnClick="OnAddOption">
            <Icon Type="plus" Theme="outline" />
            Add Option
        </Button>
        <AntList Id="Options" TItem="QuestionOptionViewModel"
                 DataSource="context.Options"
                 ItemLayout="ListItemLayout.Horizontal" Context="listItemContext">
            <ListItem Actions="@GetOptionActions(listItemContext)">
                <ListItemMeta>
                    <DescriptionTemplate>
                        <Editor @bind-Value="listItemContext.Name" Placeholder="Input option" Mode="wysiwyg" MinHeight="100" Options="@EditorOptions" />
                        @*<Input Placeholder="Input option" @bind-Value="listItemContext.Name" />*@
                        @if (context.QuestionType == ViewModels.QuestionTypes.DragDrop)
                        {
                            <Input Placeholder="Input answer" @bind-Value="listItemContext.AnswerText" TValue="string" OnChange="(item) => ResetValidation()" />
                        }
                        else
                        {
                            <Switch @bind-Value="listItemContext.IsCorrect" OnChange="(item) => ResetValidation()">
                                <CheckedChildrenTemplate>
                                    <Icon Style="color:lawngreen" Type="check"></Icon>
                                </CheckedChildrenTemplate>
                                <UnCheckedChildrenTemplate>
                                    <Icon Style="color:red" Type="close"></Icon>
                                </UnCheckedChildrenTemplate>
                            </Switch>
                        }
                    </DescriptionTemplate>
                </ListItemMeta>
            </ListItem>
        </AntList>
    </Card>

    <Divider />

    <Card Title="Analysis">
        <Editor @bind-Value="context.Analysis" Mode="wysiwyg" MinHeight="300" Options="@EditorOptions" />
    </Card>

    <Divider />

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>

@code{
    private RenderFragment[] GetOptionActions(QuestionOptionViewModel viewModel)
    {
        var result = new List<RenderFragment>();
        result.Add(GetDeleteOption(viewModel));
        return result.ToArray();
    }
    private RenderFragment GetDeleteOption(QuestionOptionViewModel viewModel)
    {
        RenderFragment option =@<Icon Type="delete" OnClick="() => OnDeleteOption(viewModel)"></Icon>;
return option;
}

}